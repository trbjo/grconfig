[

    { "keys": ["ctrl+k"], "command": "paste" },


    {"keys": ["enter"], "command": "run_macro_file", "args": {"file": "res://Packages/sublime-fly-keys/macros/div-exp.sublime-macro"}, "context": [{"key": "following_text", "operator": "regex_match", "operand": "^\">$"} ] },

    {"keys": ["enter"], "command": "run_macro_file", "args": {"file": "res://Packages/sublime-fly-keys/macros/div-exp.sublime-macro"}, "context": [{"key": "preceding_text", "operator": "regex_match", "operand": "^\\s+<\\w+>\\s?$"},  ] },


{ "keys": ["ctrl+shift+w"], "command": "align_cursors" },

{"keys": ["ctrl+alt+enter"], "command": "helium_execute_cell"},

{"keys": ["ctrl+alt+enter"],"command": "helium_execute_cell", "args": {"move_cursor": "True"}},

{"keys": [" "], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/capital-beginning.sublime-macro"}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "((\\.|\\?) |^|astri|troel|linu|ethereu|bitcoi)\\w+$"},
    {"key": "preceding_text", "operator": "not_regex_contains", "operand": "(i\\.e\\.|e\\.g\\.) \\w+$"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "selector", "operator": "equal", "operand": "text.html.markdown - source", "match_all": true },
    {"key": "setting.is_widget", "operator": "equal", "operand": false}
]
},

// {"keys": [" "], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/capital-beginning-with-comma.sublime-macro"}, "context":
// [
//     {"key": "preceding_text", "operator": "regex_contains", "operand": "((\\.|\\?) |^|astri|troel|linu|ethereu|bitcoi)\\w+[[:punct:]]$"},
//     {"key": "setting.block_caret", "operator": "equal", "operand": false },
//     {"key": "selector", "operator": "equal", "operand": "text", "match_all": true },
//     {"key": "setting.is_widget", "operator": "equal", "operand": false}
// ]
// },


{"keys": [" "], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/capital-i.sublime-macro"}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "(.* |^)i$"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "setting.english", "operator": "equal", "operand": true },
    {"key": "selector", "operator": "equal", "operand": "text", "match_all": true },
    {"key": "setting.is_widget", "operator": "equal", "operand": false}
]
},


{"keys": [";"], "command": "run_macro_file", "args": {"file": "res://Packages/sublime-fly-keys/macros/line_end_semicolon.sublime-macro"},"context": [{"key": "setting.command_mode", "operator": "equal", "operand": false }, {"key": "preceding_text", "operator": "not_regex_contains", "operand": "for\\s?\\(", "match_all": true}, {"key": "selector", "operator": "equal", "operand": "source.cs, source.tsx"}, ] },

{"keys": [";"], "command": "command_mode", "context": [{"key": "setting.command_mode", "operator": "equal", "operand": false }, {"key": "preceding_text", "operator": "regex_contains", "operand": ";$", "match_all": true}, {"key": "following_text", "operator": "regex_match", "operand": "^$", "match_all": true}, {"key": "selector", "operator": "equal", "operand": "source"}, ] },

{"keys": [";"], "command": "move_to", "args": {"to": "hardeol", "extend": false}, "context": [{"key": "setting.command_mode", "operator": "equal", "operand": false }, {"key": "following_text", "operator": "regex_contains", "operand": ";$", "match_all": true}, {"key": "selector", "operator": "equal", "operand": "source.cs, source.tsx"}, ] },


{ "keys": [" "], "command": "chain",
        "args": {
            "commands": [
                {"command": "insert", "args": {"characters": " "}},
                {"command": "wrap_lines", "args": {"width": 72}},
            ]},
            "context": [
            {"key": "setting.command_mode", "operator": "equal", "operand": false },
            {"key": "selector", "operator": "equal", "operand": "text.git.commit meta.message.git.commit", "match_all": true },
         ]
    },

{ "keys": ["backspace"], "command": "chain",
        "args": {
            "commands": [
                {"command": "left_delete"},
                {"command": "wrap_lines", "args": {"width": 72}},
            ]},
            "context": [
            {"key": "setting.command_mode", "operator": "equal", "operand": false },
            {"key": "selector", "operator": "equal", "operand": "text.git.commit meta.message.git.commit", "match_all": true },
         ]
    },

{ "keys": ["."], "command": "chain",
        "args": {
            "commands": [
                {"command": "insert", "args": {"characters": "."}},
                {"command": "wrap_lines", "args": {"width": 72}},
            ]},
            "context": [
            {"key": "setting.command_mode", "operator": "equal", "operand": false },
            {"key": "selector", "operator": "equal", "operand": "text.git.commit meta.message.git.commit", "match_all": true },
         ]
    },

{ "keys": [";"], "command": "chain",
        "args": {
            "commands": [
                {"command": "move_to", "args": {"to": "hardeol"}},
                {"command": "insert", "args": {"characters": ":"}},
                // {"command": "reindent", "args": {"force_indent": false}},
                {"command": "insert", "args": {"characters": "\n"}},
            ]},
            "context": [
            {"key": "setting.command_mode", "operator": "equal", "operand": false },
            {"key": "selector", "operator": "equal", "operand": "source.python", "match_all": true },
            {"key": "num_selections", "operator": "equal", "operand": 1 },
         ]
    },

{ "keys": [";"], "command": "chain",
        "args": {
            "commands": [
                {"command": "move_to", "args": {"to": "hardeol"}},
                {"command": "insert", "args": {"characters": ":"}},
                {"command": "unindent"},
                {"command": "insert", "args": {"characters": "\n"}},
            ]},
            "context": [
            {"key": "setting.command_mode", "operator": "equal", "operand": false },
            {"key": "selector", "operator": "equal", "operand": "source.python", "match_all": true },
            {"key": "preceding_text", "operator": "regex_contains", "operand": "\\s+(elif|else)"},
            {"key": "num_selections", "operator": "equal", "operand": 1 },
         ]
    },

{"keys": ["tab"], "command": "run_macro_file", "args": {"file": "res://Packages/sublime-fly-keys/macros/move_two_left.sublime-macro"}, "context": [{"key": "preceding_text", "operator": "regex_contains", "operand": "\\(\\);$"}, ] },


{"keys": ["tab"], "command": "insert", "args": {"characters": ">"}, "context": [{"key": "selector", "operator": "equal", "operand": "meta.tag.attributes", "match_all": true }, {"key": "preceding_text", "operator": "regex_contains", "operand": "<.*\\w+\"?$"}, {"key": "preceding_text", "operator": "not_regex_contains", "operand": ">$"}, {"key": "following_text", "operator": "not_regex_match", "operand": "^)|^}"}, ] },

{"keys": ["tab"], "command": "insert_snippet", "args": {"contents": "=\"$0\">"}, "context": [{"key": "preceding_text", "operator": "regex_contains", "operand": "(htmlFor|className|scope)$"}, {"key": "selector", "operator": "equal", "operand": "meta.tag.attributes", "match_all": true }, {"key": "following_text", "operator": "not_regex_contains", "operand": ">$"} ] },

{"keys": ["tab"], "command": "insert_snippet", "args": {"contents": "=\"$0\""}, "context": [{"key": "preceding_text", "operator": "regex_contains", "operand": "(htmlFor|className|scope)$"}, {"key": "selector", "operator": "equal", "operand": "meta.tag", "match_all": true }, {"key": "following_text", "operator": "regex_contains", "operand": ">"}, ] },

// insert higher order function arrow
{"keys": ["tab"], "command": "run_macro_file", "args": {"file": "res://Packages/sublime-fly-keys/macros/arrow_function.sublime-macro"}, "context": [{"key": "selector", "operator": "equal", "operand": "meta.block", "match_all": true }, {"key": "preceding_text", "operator": "regex_contains", "operand": "\\w+\\(\\($"}, {"key": "following_text", "operator": "regex_contains", "operand": "^\\)"} ] },

{"keys": ["tab"], "command": "insert", "args": {"characters": "=> "}, "context": [{"key": "selector", "operator": "equal", "operand": "meta.block", "match_all": true }, {"key": "preceding_text", "operator": "regex_contains", "operand": ".(\\w+)\\(\\w+ $"}, {"key": "following_text", "operator": "regex_contains", "operand": "^\\)"} ] },

{"keys": ["tab"], "command": "insert", "args": {"characters": " => "}, "context": [{"key": "selector", "operator": "equal", "operand": "meta.block", "match_all": true }, {"key": "preceding_text", "operator": "regex_contains", "operand": "\\(\\)$"}, ] },

{"keys": ["tab"], "command": "insert", "args": {"characters": " => "}, "context": [{"key": "selector", "operator": "equal", "operand": "meta.block", "match_all": true }, {"key": "preceding_text", "operator": "regex_contains", "operand": "\\{e$"}, {"key": "following_text", "operator": "regex_contains", "operand": "^}"}, ] },

{"keys": ["tab"], "command": "toggle_regex", "context": [
    {"key": "panel_has_focus", "operator": "equal", "operand": true },
    {"key": "setting.is_widget", "operator": "equal", "operand": true}
] },
{"keys": ["tab"], "command": "move", "args": {"by": "characters", "forward": true}, "context": [
    {"key": "selection_empty", "operator": "equal", "operand": false },
    {"key": "panel", "operand": "find"}, {"key": "panel_has_focus"},
] },

{"keys": ["ctrl+alt+4"], "command": "set_setting", "args": {"setting": "tab_size", "value": 4 } },
{"keys": ["ctrl+alt+2"], "command": "set_setting", "args": {"setting": "tab_size", "value": 2 } },



// {"keys": ["ctrl+shift+h"], "command": "move_to_neighboring_group", "args": {"forward": false}, "context":
//     [
//         {"key": "setting.command_mode"},
//     ]
// },

// {"keys": ["ctrl+shift+h"], "command": "create_pane_with_file_hey", "args": {"direction": "left"}, "context":
    // [
        // {"key": "setting.command_mode"},
    // ]
// },

// {"keys": ["ctrl+shift+h"], "command": "create_pane_with_file_hey", "args": {"direction": "left"},
// },



{"keys": ["ctrl+shift+h"], "command": "chain",
    "args": {
        "commands": [
            {"command": "set_layout", "args": {"cols": [0.0, 0.3, 1.0], "rows": [0.0, 1.0], "cells": [[1, 0, 2, 1], [0, 0, 1, 1]] }},
            {"command": "focus_neighboring_group"},
            // {"command": "focus_neighboring_group", "args": {"forward": false}},
            {"command": "move_to_neighboring_group", "args": {"forward": false} },
        ]
    },
    "context": [
        {"key": "setting.command_mode"},
    ]
},




{"keys": ["ctrl+shift+s"], "command": "create_pane_with_file_hey", "args": {"direction": "down"}, "context":
    [
        {"key": "setting.command_mode"},
    ]
},

{"keys": ["ctrl+k"], "command": "paste_zsh", "context": [{"key": "setting.command_mode"}, ] },

{"keys": ["insert"], "command": "paste", "args": {"clipboard": "selection"} },
{"keys": ["f12"], "command": "paste", "args": {"clipboard": "selection"} },




// a little help with Typescript
{"keys": ["=", "="], "command": "insert", "args": {"characters": "=== "}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "source.tsx"},
    {"key": "setting.command_mode", "operator": "equal", "operand": false }
]
},

{"keys": ["=", "="], "command": "insert", "args": {"characters": "==="}, "context":
[
    {"key": "following_text", "operator": "regex_contains", "operand": "^ ", "match_all": true },
    {"key": "selector", "operator": "equal", "operand": "source.tsx"},
    {"key": "setting.command_mode", "operator": "equal", "operand": false }
]
},

{"keys": ["!", "="], "command": "insert", "args": {"characters": "!== "}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "source.tsx"},
    {"key": "setting.command_mode", "operator": "equal", "operand": false }
]
},

{"keys": ["=", "="], "command": "insert", "args": {"characters": "== "}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "source.cs"},
    {"key": "setting.command_mode", "operator": "equal", "operand": false }
]
},

{"keys": ["="], "command": "insert", "args": {"characters": "== "}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "if\\(.*\\s", "match_all": true },
    {"key": "selector", "operator": "equal", "operand": "source.cs"},
    {"key": "setting.command_mode", "operator": "equal", "operand": false }
]
},

{"keys": ["="], "command": "insert", "args": {"characters": " == "}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "if\\(.*\\S", "match_all": true },
    {"key": "selector", "operator": "equal", "operand": "source.cs"},
    {"key": "setting.command_mode", "operator": "equal", "operand": false }
]
},

{"keys": ["!", "="], "command": "insert", "args": {"characters": "!= "}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "source.cs"},
    {"key": "setting.command_mode", "operator": "equal", "operand": false }
]
},

{"keys": ["!", "="], "command": "insert", "args": {"characters": "!=="}, "context":
[
    {"key": "following_text", "operator": "regex_contains", "operand": "^ ", "match_all": true },
    {"key": "selector", "operator": "equal", "operand": "source.tsx"},
    {"key": "setting.command_mode", "operator": "equal", "operand": false }
]
},


{"keys": ["`"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
[
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true },
]
},


{"keys": ["ctrl++"], "command": "noop" },

{"keys": ["ctrl+="], "command": "noop" },

{"keys": ["alt+c"], "command": "move", "args": {"by": "pages", "forward": false} },

{"keys": ["alt+shift+c"], "command": "move", "args": {"by": "pages", "forward": false, "extend": true} },

{"keys": ["alt+t"], "command": "move", "args": {"by": "pages", "forward": true} },

{"keys": ["alt+shift+t"], "command": "move", "args": {"by": "pages", "forward": true, "extend": true} },

{"keys": ["$"], "command": "insert_snippet", "args": {"contents": "\\$\"$0\""}, "context":
[
    {"key": "selector", "operand": "source.cs"},
    {"key": "preceding_text", "operator": "regex_contains", "operand": "\\($", "match_all": true},
    {"key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true},
    {"key": "setting.command_mode", "operator": "equal", "operand": false },
]
},

{"keys": ["ctrl+shift+b"], "command": "build", "args": {"build_system": "Packages/sublime-fly-keys/csharp.sublime-build", "variant": "thistestonly", "choice_build_system": true, "choice_variant": true }, "context": [
    {"key": "selector", "operator": "equal", "operand": "source.cs"},
]
},


// if and for loop snippet insertion
{"keys": ["("], "command": "insert_snippet", "args": {"contents": "($0) {\n}"}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "(if|for|while)\\s?$", "match_all": true},
    {"key": "selector", "operator": "equal", "operand": "source.cs, source.tsx"},
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|;|\\}|$)", "match_all": true }
]
},



{"keys": ["enter"], "command": "insert_snippet", "args": {"contents": "\n- ${0:$SELECTION}"}, "context": [
    {"key": "setting.command_mode", "operand": false},
    {"key": "selector", "operator": "equal", "operand": "text.html.markdown - source", "match_all": true },
    {"key": "preceding_text", "operator": "regex_contains", "operand": "^-"},
]},


{"keys": ["enter"], "command": "increment_number_list", "context": [
    {"key": "setting.command_mode", "operand": false},
    {"key": "selector", "operator": "equal", "operand": "text.html.markdown - source", "match_all": true },
    {"key": "preceding_text", "operator": "regex_contains", "operand": "^\\d+\\. .+"},
]},


{ "keys": ["enter"], "command": "chain",
        "args": {
            "commands": [
                {"command": "move_to", "args": {"to": "hardbol", "extend": true}},
                {"command": "left_delete"},
            ]},
        "context": [
            {"key": "preceding_text", "operator": "regex_match", "operand": "^- |^\\d+\\. "},
            {"key": "selector", "operator": "equal", "operand": "text.html.markdown - source", "match_all": true },
            {"key": "setting.command_mode", "operand": false},
     ]
},

{"keys": ["!"], "command": "run_macro_file", "args": {"file": "res://Packages/sublime-fly-keys/macros/insert_important_css.sublime-macro"}, "context": [{"key": "preceding_text", "operator": "regex_contains", "operand": ";$"}, {"key": "selector", "operator": "equal", "operand": "source.css, source.scss"}, ] },
{ "keys": ["!"], "command": "insert", "args": {"characters": " !important"}, "context": [{"key": "following_text", "operator": "regex_contains", "operand": "^;"}, {"key": "selector", "operator": "equal", "operand": "source.css, source.scss"}, ] },



{"keys": ["ctrl+shift+o"], "command": "lower_case" },
{"keys": ["ctrl+shift+u"], "command": "upper_case" },
{"keys": ["ctrl+tab"], "command": "next_view" },
{"keys": ["ctrl+shift+tab"], "command": "prev_view" },

{"keys": ["`"], "command": "next_view_in_stack", "context": [{"key": "setting.command_mode"}, ] },
{"keys": ["ctrl+`"], "command": "toggle_side_bar" },

{"keys": ["ctrl+x"], "command": "duplicate_line", "context": [{"key": "setting.command_mode"} ] },


{"keys": ["escape"], "command": "prompt_git", "context": [{ "key": "selector", "operator": "equal", "operand": "text.git.commit", "match_all": true }, ] },


{"keys": ["ctrl+d"], "command": "toggle_regex", "context":
    [
        {"key": "panel_has_focus", "operator": "equal", "operand": true },
        {"key": "setting.is_widget", "operator": "equal", "operand": true}
    ]
},
{"keys": ["ctrl+c"], "command": "toggle_case_sensitive", "context":
    [
        {"key": "panel_has_focus", "operator": "equal", "operand": true },
        {"key": "setting.is_widget", "operator": "equal", "operand": true}
    ]
},
{"keys": ["ctrl+w"], "command": "toggle_whole_word", "context":
    [
        {"key": "panel_has_focus", "operator": "equal", "operand": true },
        {"key": "setting.is_widget", "operator": "equal", "operand": true}
    ]
},

// {"keys": ["escape"], "command": "unselect_to_right"},



]
