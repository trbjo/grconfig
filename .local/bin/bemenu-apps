#!/usr/bin/zsh

/usr/bin/pgrep -x bemenu && exit

IFS=$'\n'
typeset -a list

type firefox > /dev/null 2>&1 && list+=(" Firefox" " Firefox (Private Window)" " IRC")
type subl > /dev/null 2>&1 && list+=(" Sublime Text")
type emacs > /dev/null 2>&1 && list+=(" Emacs")
type inkscape > /dev/null 2>&1 && list+=(" Inkscape")
type spot > /dev/null 2>&1 && list+=(" Spotify")
type smerge > /dev/null 2>&1 && list+=(" Sublime Merge")
type baobab > /dev/null 2>&1 && list+=(" Disk Usage")
type gnome-disks > /dev/null 2>&1 && list+=(" Disk Utility")
type telegram-desktop > /dev/null 2>&1 && list+=(" Telegram")
type pavucontrol > /dev/null 2>&1 && list+=(" SoundControl")
type libreoffice > /dev/null 2>&1 && list+=(" LibreOffice Writer" " LibreOffice Calc" " LibreOffice Draw" " LibreOffice Impress" )

type darkmode > /dev/null 2>&1 &&  {
    theme="$(gsettings get org.gnome.desktop.interface gtk-theme)"
    if [[ $theme  == "'Adwaita'" ]]; then
        list+=(" Dark Mode")
    else
        list+=(" Light Mode")
    fi
}

type wf-recorder > /dev/null 2>&1 && {
    if pgrep -x wf-recorder > /dev/null 2>&1; then
        recorder="Stop Recording"
    else
        recorder="Record Desktop"
    fi
    list+=(" $recorder")
}

type chromium-snapshot-bin > /dev/null 2>&1 && list+=(" Chrome" " Discord" " Slack" " Outlook")
type microsoft-edge-dev > /dev/null 2>&1 && list+=(" Teams")
type code > /dev/null 2>&1 && list+=(" VSCode")
type grim > /dev/null 2>&1 && list+=(" Screenshot (Whole Screen)" " Screenshot (Whole Screen, Delay)") && \
type slurp > /dev/null 2>&1 && list+=(" Screenshot (Subset)")
type foot > /dev/null 2>&1 && list+=(" Foot Terminal")
type quicknotes.py > /dev/null 2>&1 && list+=(" Add to Quicknotes" " Open Quicknotes")
type wl-paste > /dev/null 2>&1 && list+=(" Upload Clipboard" " Upload Clipboard (Primary)")

type iwctl > /dev/null 2>&1 && {
    if systemctl is-active --quiet iwd; then
        wifi="OFF"
    else
        wifi="ON"
    fi
    list+=(" Turn WiFi $wifi")
}


type swaylock > /dev/null 2>&1 && list+=(" Lock")

type dbus-send > /dev/null 2>&1 && list+=(" Suspend" " Reboot" " Poweroff")

case $(bemenu --fork --prompt 'Programs' <<< ${${list[@]/#/  }/%/   }) in
    '   Firefox   ')
        swaymsg -q --  '[app_id="^PopUp$"] move scratchpad'
        swaymsg -q --  '[app_id="^firefox$" tiling] focus' || swaymsg exec /usr/bin/firefox
        ;;


    '   Firefox (Private Window)   ')
        swaymsg -q --  '[app_id="^PopUp$"] move scratchpad; [app_id="^firefox$" tiling] focus'
        swaymsg -q -- '[title="Mozilla\ Firefox\ \(Private\ Browsing\)$"] focus' || swaymsg exec '/usr/bin/firefox --private-window'
        ;;

    '   IRC   ')
        swaymsg -q -- '[app_id="^PopUp$"] move scratchpad; [title="^chat.sr.ht\ —\ Mozilla\ Firefox$"] focus' || swaymsg exec '/usr/bin/firefox --new-window --kiosk https://chat.sr.ht/'
        ;;


    '  ↓↑ Show Download Speed   ')
        interface=/sys/class/net/wlan0
        readable() {
            local bytes=$1
            local kib=$(( bytes >> 10 ))
            if [ $kib -lt 0 ]; then
                printf "? K"
            elif [ $kib -gt 1024 ]; then
                local mib_int=$(( kib >> 10 ))
                local mib_dec=$(( kib % 1024 * 976 / 10000 ))
                if [ "$mib_dec" -lt 10 ]; then
                    mib_dec="0${mib_dec}"
                fi

                if [ "${mib_dec:1:2}" -ge 9 ]; then
                    mib_dec="0"
                    mib_int=$(( mib_int + 1))
                elif [ "${mib_dec:1:2}" -ge 5 ]; then
                    mib_dec=$(( ${mib_dec:0:1} + 1 ))
                else
                    mib_dec=$(( ${mib_dec:0:1} ))
                fi
                printf "${mib_int}.${mib_dec}Mb/s"
            else
                printf "${kib}Kb/s"
            fi
        }

        swaymsg -- "bindsym escape exec 'swaymsg -- unbindsym escape; exec pkill -f \"zsh $0\"'"

        while true; do
            read last_rx < "${interface}/statistics/rx_bytes"
            read last_tx < "${interface}/statistics/tx_bytes"
            sleep 1
            read rx < "${interface}/statistics/rx_bytes"
            read tx < "${interface}/statistics/tx_bytes"
            notify-send "↓$(readable $((rx - last_rx)))" "↑$(readable $((tx - last_tx)))" --app-name='NETSPEED'
        done
        ;;


    '   Sublime Text   ')
        swaymsg -q --  '[app_id="^PopUp$"] move scratchpad; [app_id="^sublime_text$"] focus'
        swaymsg exec -q -- /opt/sublime_text/sublime_text
        ;;


    '   Emacs   ')
        swaymsg -q --  '[app_id="^PopUp$"] move scratchpad; [app_id="^emacs$"] focus' || swaymsg exec -q -- /usr/bin/emacs
        ;;


    '   Inkscape   ')
        swaymsg -q --  '[app_id="^PopUp$"] move scratchpad; [app_id="^inkscape$"] focus' || swaymsg exec -q -- /usr/bin/inkscape
        ;;


    '   Spotify   ')
        swaymsg -q --  '[app_id="^PopUp$"] move scratchpad; [app_id="^dev.alextren.Spot$"] focus' || swaymsg exec -q -- /usr/bin/spot
        ;;


    '   Disk Usage   ')
        swaymsg -q --  '[app_id="^PopUp$"] move scratchpad; [app_id="^baobab$"] focus'
        swaymsg exec -q -- /usr/bin/baobab
        ;;


    '   Disk Utility   ')
        swaymsg -q --  '[app_id="^PopUp$"] move scratchpad; [app_id="^gnome-disks$"] focus'
        swaymsg exec -q -- /usr/bin/gnome-disks
        ;;


    '   Stop Recording   ')
        pkill -SIGINT wf-recorder
        notify-send.sh "Recording saved" "$curdate" --expire-time=5000 --icon=camera-video --default-action="xdg-open $HOME/vid/"
        ;;


    '   Record Desktop   ')
        integer active_outputs
        active_outputs=$(swaymsg -t get_tree | jq -r '[. | (.nodes? // empty)[] | select(.type=="output" and .name!="__i3") ] | length')
        if (( active_outputs > 1)); then
            export XCURSOR_SIZE=48
            output="$(slurp -w 1 -c A5BAD1 -s C3DFFE94 -f "%l" -o)"
            if [[ -z $output ]]; then
                exit
            fi
        fi
        curdate=$(date +"Recording_%Y-%m-%d_%H:%M:%S.mp4")
        notify-send "Recording Desktop in 3 seconds" "Press ctrl+c to stop it" --icon=camera-video
        sleep 1
        notify-send "Recording Desktop in 2 seconds" "Press ctrl+c to stop it" --icon=camera-video
        sleep 1
        notify-send "Recording Desktop in 1 seconds" "Press ctrl+c to stop it" --icon=camera-video
        sleep 1
        swaymsg -- "bindsym ctrl+c exec pkill -SIGINT wf-recorder && swaymsg -- unbindsym ctrl+c && notify-send.sh 'Recording saved' '$curdate' --expire-time=5000 --icon=camera-video --default-action=\"xdg-open $HOME/vid/\""
        if (( active_outputs > 1)); then
            wf-recorder -o "$output" -f ~/vid/$curdate
        else
            wf-recorder -f ~/vid/$curdate
        fi
        ;;


    '   Telegram   ')
        export DESKTOP_APP_I_KNOW_ABOUT_GTK_INCOMPATIBILITY=1
        export DESKTOP_APP_DISABLE_TRAY_COUNTER=1
        export TDESKTOP_I_KNOW_ABOUT_GTK_INCOMPATIBILITY=1
        export TDESKTOP_DISABLE_TRAY_COUNTER=1
        export TDESKTOP_USE_PORTAL=1
        export TDESKTOP_USE_GTK_FILE_DIALOG=1
        grep --color=auto -q 'enabled' /sys/class/drm/card0-DP-1/enabled && export ALSA_CARD=Audio
        readlink -q /sys/bus/hid/devices/0003:047F:02F7* > /dev/null 2>&1 && export ALSA_CARD=BT600
        swaymsg -q --  '[app_id="^PopUp$"] move scratchpad; [app_id="-Telegram_Desktop$"] focus'
        swaymsg exec -q -- /usr/bin/telegram-desktop
        ;;


    '   VSCode   ')
        electron13 /usr/lib/code/out/cli.js /usr/lib/code/code.js --enable-features=UseOzonePlatform --ozone-platform=wayland
        ;;


    '   Slack   ')
        swaymsg -q -- '[app_id="^PopUp$"] move scratchpad'
        swaymsg -q -- '[app_id="^\/usr\/bin\/chromium-snapshot-bin$" title="^Slack"] focus' ||\
        swaymsg exec -q -- /usr/bin/chromium-snapshot-bin --user-data-dir=~/.cache/chrom/Slack --enable-features=UseOzonePlatform --ozone-platform=wayland --app='https://app.slack.com/client/T03PATMPV/D02D6BJLB5Z' &!
        ;;


    '   Outlook   ')
        swaymsg -q -- '[app_id="^PopUp$"] move scratchpad'
        swaymsg -q -- '[app_id="^\/usr\/bin\/chromium-snapshot-bin$" title="^Slack"] focus' ||\
        swaymsg exec -q -- /usr/bin/chromium-snapshot-bin --user-data-dir=~/.cache/chrom/Outlook --enable-features=UseOzonePlatform --ozone-platform=wayland --app='https://outlook.com/' &!
        ;;


    '   Dark Mode   ')
        /home/tb/.local/bin/darkmode dark
        ;;


    '   Light Mode   ')
        /home/tb/.local/bin/darkmode light
        ;;


    '   Teams   ')
        swaymsg -q -- '[app_id="^PopUp$"] move scratchpad'
        swaymsg -q -- '[app_id="^microsoft-edge-dev$"] focus' ||\
        swaymsg exec -- /opt/microsoft/msedge-dev/microsoft-edge-dev --enable-features=UseOzonePlatform --ozone-platform=wayland 'teams.microsoft.com'
        sleep 10
        pkill msedge_crashpad
        ;;


    '   Discord   ')
        swaymsg -q -- '[app_id="^PopUp$"] move scratchpad'
        swaymsg -q -- '[app_id="chrome-discord.com__channels_280102180189634562_280102180189634562-Default$"] focus' ||\
        swaymsg exec -- /usr/bin/chromium-snapshot-bin --enable-features=UseOzonePlatform --ozone-platform=wayland --app='https://discord.com/channels/280102180189634562/280102180189634562' --user-data-dir=~/.cache/chrom/Discord
        sleep 10
        pkill chrome_crashpad
        ;;


    '   Chrome   ')
        swaymsg -q -- '[app_id="^PopUp$"] move scratchpad'
        swaymsg -q -- '[app_id="^\/usr\/bin\/chromium-snapshot-bin$"] focus' ||\
        swaymsg exec -- /usr/bin/chromium-snapshot-bin --enable-features=UseOzonePlatform --ozone-platform=wayland
        sleep 10
        pkill chrome_crashpad
        ;;


    '   SoundControl   ')
        swaymsg exec -q -- /usr/bin/pavucontrol
        ;;


    '   LibreOffice Writer   ')
        swaymsg exec -q -- libreoffice --writer
        ;;


    '   LibreOffice Calc   ')
        swaymsg exec -q -- libreoffice --calc
        ;;


    '   LibreOffice Draw   ')
        swaymsg exec -q -- libreoffice --draw
        ;;


    '   LibreOffice Impress   ')
        swaymsg exec -q -- libreoffice --impress
        ;;


    '   Lock   ')
        /usr/bin/loginctl lock-session
        ;;


    '   Turn WiFi ON   ')
        message() {
            notify-send "Wi-Fi Manager" "$1" --icon=preferences-system-network
        }
        doas /usr/bin/systemctl start iwd.service
        doas /usr/bin/rfkill unblock wifi
        message "Turning Wi-Fi on"
        /usr/lib/systemd/systemd-networkd-wait-online --ignore=lo --timeout=30 --interface=wlan0 --operational-state=dormant && message "Connected to $( iw dev wlan0 link | grep -oP '(?<=SSID: ).+')"
        ;;


    '   Turn WiFi OFF   ')
        notify-send "Wi-Fi Manager" "Turning Wi-Fi off" --icon=preferences-system-network
        doas /usr/bin/systemctl stop iwd.service
        doas /usr/bin/rfkill block wifi
        ;;


    '   Suspend   ')
        /usr/bin/dbus-send --system --print-reply --dest=org.freedesktop.login1 /org/freedesktop/login1 "org.freedesktop.login1.Manager.Suspend" boolean:true
        ;;


    '   Hibernate   ')
        dbus-send --system --print-reply --dest=org.freedesktop.login1 /org/freedesktop/login1 "org.freedesktop.login1.Manager.Hibernate" boolean:true
        ;;


    '   Reboot   ')
        /usr/bin/dbus-send --system --print-reply --dest=org.freedesktop.login1 /org/freedesktop/login1 "org.freedesktop.login1.Manager.Reboot" boolean:true
        ;;


    '   Poweroff   ')
        /usr/bin/dbus-send --system --print-reply --dest=org.freedesktop.login1 /org/freedesktop/login1 "org.freedesktop.login1.Manager.PowerOff" boolean:true
        ;;


    '   Sublime Merge   ')
        swaymsg -q --  '[app_id="^PopUp$"] move scratchpad; [app_id="^sublime_merge$"] focus'
        if pgrep -x sublime_text; then
            /opt/sublime_text/sublime_text --fwdargv0 "$0" --command get_sublime_folder_name
        fi
        swaymsg exec -q -- /opt/sublime_merge/sublime_merge --fwdargv0 "$0" "$(cat /tmp/sublfile)" || /opt/sublime_merge/sublime_merge
        ;;


    '   Screenshot (Whole Screen)   ')
        /usr/bin/pgrep slurp || {
            curdate=$(date +"Screenshot_%Y-%m-%d_%H:%M:%S.png")
            screenshot=$HOME/screenshots/$curdate
            grim $screenshot && notify-send.sh "Screenshot taken" "$curdate" --icon=camera-photo --default-action="swaymsg -- unbindsym return && swaymsg -- unbindsym escape; xdg-open \"$screenshot\""
            wl-copy < "$screenshot"
            swaymsg -- "bindsym return exec xdg-open \"$screenshot\" && swaymsg -- unbindsym return && swaymsg -- unbindsym escape"
            swaymsg -- "bindsym escape exec makoctl dismiss && swaymsg -- unbindsym return && swaymsg -- unbindsym escape"
        }
        ;;


    '   Screenshot (Whole Screen, Delay)   ')
        /usr/bin/pgrep slurp || {
            notify-send "Taking Screenshot in 3 seconds" --icon=camera-video
            sleep 1
            notify-send "Taking Screenshot in 2 seconds" --icon=camera-video
            sleep 1
            notify-send "Taking Screenshot in 1 second" --icon=camera-video
            sleep 1

            curdate=$(date +"Screenshot_%Y-%m-%d_%H:%M:%S.png")
            screenshot=$HOME/screenshots/$curdate
            grim $screenshot && notify-send.sh "Screenshot taken" "$curdate" --icon=camera-photo --default-action="swaymsg -- unbindsym return && swaymsg -- unbindsym escape; xdg-open \"$screenshot\""
            wl-copy < "$screenshot"
            swaymsg -- "bindsym return exec xdg-open \"$screenshot\" && swaymsg -- unbindsym return && swaymsg -- unbindsym escape"
            swaymsg -- "bindsym escape exec makoctl dismiss && swaymsg -- unbindsym return && swaymsg -- unbindsym escape"
        }
        ;;


    '   Screenshot (Subset)   ')
        /usr/bin/pgrep slurp || {
            curdate=$(date +"Screenshot_%Y-%m-%d_%H:%M:%S.png")
            screenshot=$HOME/screenshots/$curdate
            export XCURSOR_SIZE=48
            swaymsg -t get_tree | jq -r ".. | select(.pid? and .visible?) | .rect | \"\\(.x),\\(.y) \\(.width)x\\(.height)\"" | slurp -w 1 -c A5BAD1 -s C3DFFE94 | grim -g - "$screenshot" && {
            notify-send.sh "Screenshot taken" "$curdate" --icon=camera-photo --default-action="swaymsg -- unbindsym return && swaymsg -- unbindsym escape; xdg-open \"$screenshot\""
            swaymsg -- "bindsym return exec xdg-open \"$url\" && swaymsg -- unbindsym return"
            wl-copy < "$screenshot"
            swaymsg -- "bindsym return exec xdg-open \"$screenshot\" && swaymsg -- unbindsym return && swaymsg -- unbindsym escape"
            swaymsg -- "bindsym escape exec makoctl dismiss && swaymsg -- unbindsym return && swaymsg -- unbindsym escape"
            }
        }
        ;;



    '   Upload Clipboard   ')
        set -o noglob
        tmpfile=$(mktemp /tmp/pastedata-XXXX)
        wl-paste > $tmpfile
        url=$(curl -s --data-binary "@$tmpfile" "https://paste.c-net.org/")
        if [[ -z "$url" ]]; then
            notify-send.sh "Upload failed" "Failed to upload clipboard" --icon=dialog-error
            exit
        fi
        swaymsg -- "bindsym return exec xdg-open \"$url\" && swaymsg -- unbindsym return"
        wl-copy -n "$url"
        notify-send.sh "Uploaded paste" "Uploaded to Pastebin" --default-action="xdg-open $url" --icon=gtk-network
        ;;


    '   Upload Clipboard (Primary)   ')
        set -o noglob
        tmpfile=$(mktemp /tmp/pastedata-XXXX)
        wl-paste --primary >> $tmpfile
        url=$(curl -s --data-binary "@$tmpfile" "https://paste.c-net.org/")
        if [[ -z "$url" ]]; then
            notify-send.sh "Upload failed" "Failed to upload clipboard" --icon=dialog-error
            exit
        fi
        swaymsg -- "bindsym return exec xdg-open \"$url\" && swaymsg -- unbindsym return"
        wl-copy -n "$url"
        notify-send.sh "Uploaded paste" "Uploaded to Pastebin" --default-action="xdg-open $url" --icon=gtk-network
        ;;


    '   Open Quicknotes   ')
            swaymsg -q --  '[app_id="^PopUp$"] move scratchpad; [app_id="^sublime_text$"] focus'
            swaymsg exec -q -- /opt/sublime_text/sublime_text $HOME/quicknotes.md
        ;;


    '   Add to Quicknotes   ')
        quicknotes.py
        ;;


    '   Foot Terminal   ')
        /usr/bin/foot
        ;;


    *)
        # elems=$(swaymsg -t get_tree | jq -r '[.. | ((.floating_nodes,.nodes)? // empty)[] | select(.pid and .visible)] | length')
        # (( elems == 1 )) && swaymsg fullscreen enable





esac
